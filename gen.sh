#!/bin/bash

SRC=$(realpath $(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd))

set -e

declare -A TARGETS=(
  [darwin_amd64]=darwin_x86_64
  [darwin_arm64]=darwin_aarch64
  [linux_amd64]=linux_x86_64-full
  [linux_arm64]=linux_arm64-full
  [linux_arm]=linux_armv7
  [windows_amd64]=windows_static-x64-posix
#  [windows_arm64]=windows_arm64
)

BUILD_TARGETS=
CLEAN=0
CACHE=$SRC/.cache
BUILDS=
UPDATE=0

OPTIND=1
while getopts "t:b:cC:u" opt; do
case "$opt" in
  t) BUILD_TARGETS=$OPTARG ;;
  b) BUILDS=$OPTARG ;;
  c) CLEAN=1 ;;
  C) CACHE=$OPTARG ;;
  u) UPDATE=1 ;;
esac
done

mkdir -p $CACHE
CACHE=$(realpath "$CACHE")

relname() {
  sed -e "s%^$PWD/%%" <<< "$1"
}

osxcross() {
  local target=$1 extra=$2
  local build_target="${TARGETS[$target]}"
  local platform=$(sed -e 's/[-_]/ /' <<< "$build_target"|awk '{print $1}')
  local arch=$(sed -e 's/[-_]/ /' <<< "$build_target"|awk '{print $2}')

  if [ ! -z "$extra" ]; then
    extra+=" "
  fi

  # add builds
  for build in $BUILDS; do
    extra+="-b $build "
  done

  # enable kvazaar for arm64
  case $target in
    darwin_arm64) extra+="-k ON ";;
  esac

  # determine osxcross config info
  local osxcross_conf=$(type -p osxcross-conf)
  if [ -z "$osxcross_conf" ]; then
    echo "error: could not find osxcross-conf"
    exit 1
  fi
  eval "$($osxcross_conf)"
  if [ -z "$OSXCROSS_TARGET" ]; then
    echo "error: OSXCROSS_TARGET is empty!"
    exit 1
  fi

  dockcross linux_amd64 "-D $target.preset"
  CROSS_TRIPLE="$arch-apple-$OSXCROSS_TARGET" \
    $SRC/build.sh \
      -d $SRC/.cache/$target \
      -P $target.preset \
      $extra
}

dockcross() {
  local target=$1 extra=$2
  local build_target="${TARGETS[$target]}"
  local platform=$(sed -e 's/[-_]/ /' <<< "$build_target"|awk '{print $1}')
  local arch=$(sed -e 's/[-_]/ /' <<< "$build_target"|awk '{print $2}')
  local image="docker.io/dockcross/$platform-$arch:latest"

  if [ ! -z "$extra" ]; then
    extra+=" "
  fi

  # add builds
  for build in $BUILDS; do
    extra+="-b $build "
  done

  # disable svt-av1 for arm
  case $target in
    linux_arm)      extra+="-s OFF " ;;
    windows_arm64)  extra+="-s OFF -k OFF " ;;
  esac

  if [ "$UPDATE" = "1" ]; then
    (set -x;
      podman pull $image
    )
  fi
  (set -x;
    podman run \
      --rm \
      $image \
      > $CACHE/build-$target.sh
    chmod +x $CACHE/build-$target.sh
  )
  pushd $SRC &> /dev/null
  (set -x;
    $CACHE/build-$target.sh \
      bash -c "./build.sh -d .cache/$target $extra"
  )
  popd &> /dev/null
}

wincross() {
  local target=$1 extra=$2
  dockcross linux_amd64 "-D $target.preset"
  dockcross "$target" "-P $target.preset $extra"
}

if [ -z "$BUILD_TARGETS" ]; then
  BUILD_TARGETS="${!TARGETS[@]}"
fi

BUILD_TARGETS=$(sed -e 's/\s\+/\n/g' <<< "$BUILD_TARGETS"|sort -i|tr '\n' ' ')
echo "TARGETS: $BUILD_TARGETS"

for TARGET in $BUILD_TARGETS; do
  BUILD_DIR=$CACHE/$TARGET
  BUILD_TARGET="${TARGETS[$TARGET]}"
  PLATFORM=$(sed -e 's/[-_]/ /' <<< "$BUILD_TARGET"|awk '{print $1}')
  ARCH=$(sed -e 's/[-_]/ /' <<< "$BUILD_TARGET"|awk '{print $2}')
  DEST=$SRC/libheif/$TARGET

  if [[ -z "$BUILD_TARGET" || -z "$PLATFORM" || -z "$ARCH" ]]; then
    echo "error: invalid target '$TARGET'"
    exit 1
  fi

  if [ "$CLEAN" = "1" ]; then
    (set -x;
      rm -rf $BUILD_DIR $DEST
    )
  fi

  echo "GENERATING: $TARGET -> $(relname "$BUILD_DIR") ($PLATFORM/$ARCH)"
  case $TARGET in
    darwin*)  osxcross  "$TARGET" ;;
    windows*) wincross  "$TARGET" ;;
    *)        dockcross "$TARGET" ;;
  esac

  DIST_DIR=$BUILD_DIR/dist
  mkdir -p $DEST
  (set -x;
    cp $DIST_DIR/lib/*.a $DEST
    chmod 0644 $DEST/*.a
    cp $DIST_DIR/include/libheif/heif{,_version}.h $SRC/libheif
    perl -pi -e 's/#define LIBHEIF_PLUGIN_DIRECTORY.*/#define LIBHEIF_PLUGIN_DIRECTORY ""/' $SRC/libheif/heif_version.h
  )
done

#cp $WORKDIR/libheif/libheif/heif.h $SRC/libheif
#
## generate supported file types
#BRANDS=$(sed -n 's/^#define heif_brand2_\([a-z0-9]\+\).*/\1/p' < $WORKDIR/libheif/libheif/heif.h)
#
#REG=""
#for brand in $BRANDS; do
#  REG+="$(cat << END
#	image.RegisterFormat("${brand}", "????ftyp${brand}", Decode, DecodeConfig);
#END
#)"
#done
#
#cat > $SRC/z.go << END
#package heif
#
#import (
#  "image"
#)
#
#// REPLACE
#
#func init() {
#  $REG
#}
#END
#
#gofumpt -w -extra $SRC/z.go
#perl -pi -e 's/REPLACE/Generated by gen.sh. DO NOT EDIT./' $SRC/z.go

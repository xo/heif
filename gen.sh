#!/bin/bash

SRC=$(realpath $(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd))

set -e

CACHE=$SRC/.cache
BUILD_TARGETS=""
UPDATE=0

mkdir -p $CACHE

declare -A TARGETS=(
#  [darwin_amd64]=darwin_x86_64
#  [darwin_arm64]=darwin_aarch64
  [linux_amd64]=linux_x86_64-full
  [linux_arm64]=linux_arm64-full
  [linux_arm]=linux_armv7
  [windows_amd64]=windows_static-x64
#  [windows_amd64]=windows_static-x64-posix
#  [windows_arm64]=windows_arm64
)
#[dragonfly_amd64]=
#[freebsd_amd64]=
#[netbsd_amd64]=
#[openbsd_amd64]=
#[windows_arm64]=
#[solaris_amd64]=

OPTIND=1
while getopts "t:u" opt; do
case "$opt" in
  t) BUILD_TARGETS="$OPTARG" ;;
  u) UPDATE=1 ;;
esac
done

relname() {
  sed -e "s%^$PWD/%%" <<< "$1"
}

osxcross() {
  echo osxcross
}

dockcross() {
  local target=$1
  local build_target="${TARGETS[$target]}"
  local platform=$(sed -e 's/[-_]/ /' <<< "$build_target"|awk '{print $1}')
  local arch=$(sed -e 's/[-_]/ /' <<< "$build_target"|awk '{print $2}')
  local image="docker.io/dockcross/$platform-$arch:latest"

  # determine if svt-av1 should be used or not
  local svt=ON
  case $target in
    linux_arm) svt=OFF ;;
  esac

  # hack for dump param
  local dump=""
  if [ ! -z "$2" ]; then
    dump="-D $2"
  fi

  if [ "$UPDATE" = "1" ]; then
    (set -x;
      podman pull $image
    )
  fi
  (set -x;
    podman run \
      --rm \
      $image \
      > $CACHE/build-$target.sh
    chmod +x $CACHE/build-$target.sh
    $CACHE/build-$target.sh \
      bash -c "./build.sh -d .cache/libheif/$target -s $svt $dump"
  )
}

wincross() {
  dockcross linux_amd64 ".cache/linux_amd64.preset"
  dockcross "$1"
}

if [ -z "$BUILD_TARGETS" ]; then
  BUILD_TARGETS="${!TARGETS[@]}"
fi

BUILD_TARGETS=$(sed -e 's/\s\+/\n/g' <<< "$BUILD_TARGETS"|sort -i|tr '\n' ' ')
echo "TARGETS: $BUILD_TARGETS"

for TARGET in $BUILD_TARGETS; do
  BUILD_DIR=$CACHE/libheif/$TARGET
  BUILD_TARGET="${TARGETS[$TARGET]}"
  PLATFORM=$(sed -e 's/[-_]/ /' <<< "$BUILD_TARGET"|awk '{print $1}')
  ARCH=$(sed -e 's/[-_]/ /' <<< "$BUILD_TARGET"|awk '{print $2}')

  if [[ -z "$BUILD_TARGET" || -z "$PLATFORM" || -z "$ARCH" ]]; then
    echo "error: invalid target '$TARGET'"
    exit 1
  fi

  echo "TARGET: $TARGET -> $(relname "$BUILD_DIR") ($PLATFORM/$ARCH)"
  case $TARGET in
    darwin*)  osxcross  "$TARGET" ;;
    windows*) wincross  "$TARGET" ;;
    *)        dockcross "$TARGET" ;;
  esac

  DIST_DIR=$BUILD_DIR/dist
  DEST=$SRC/libheif/$TARGET
  mkdir -p $DEST
  (set -x;
    cp $DIST_DIR/lib/libheif.a $DEST
    chmod 0644 $DEST/libheif.a
    cp $DIST_DIR/include/libheif/heif{,_version}.h $SRC/libheif
    perl -pi -e 's/#define LIBHEIF_PLUGIN_DIRECTORY.*/#define LIBHEIF_PLUGIN_DIRECTORY ""/' $SRC/libheif/heif_version.h
  )
done

#cp $WORKDIR/libheif/libheif/heif.h $SRC/libheif
#
## generate supported file types
#BRANDS=$(sed -n 's/^#define heif_brand2_\([a-z0-9]\+\).*/\1/p' < $WORKDIR/libheif/libheif/heif.h)
#
#REG=""
#for brand in $BRANDS; do
#  REG+="$(cat << END
#	image.RegisterFormat("${brand}", "????ftyp${brand}", Decode, DecodeConfig);
#END
#)"
#done
#
#cat > $SRC/z.go << END
#package heif
#
#import (
#  "image"
#)
#
#// REPLACE
#
#func init() {
#  $REG
#}
#END
#
#gofumpt -w -extra $SRC/z.go
#perl -pi -e 's/REPLACE/Generated by gen.sh. DO NOT EDIT./' $SRC/z.go
